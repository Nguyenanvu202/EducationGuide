@using AutoMapper;
@using Core.Models.Domain;
@using Core.Models.Repository;
@using EducationGuide.Admin.Authentication;
@using System.Security.Claims;
@page "/edit-section"

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject ISectionRepository _sectionRepository
@inject IPageRepository _pageRepository
@inject IMapper _mapper;
@inject EducationGuideAuthenticationStateProvider EducationGuideAuthenticationStateProvider
<PageTitle>Edit Section</PageTitle>


    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Section</RadzenAlert>
        <RadzenTemplateForm TItem="Section" Data="@_section" Visible="@(_section != null)" Submit="@FormSubmit">
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Title" Component="Title" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@_section.Title" Name="Title" />
                    <RadzenRequiredValidator Component="Title" Text="Title is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Content" Component="Content" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@_section.Content" Name="Content" />
                    <RadzenRequiredValidator Component="Content" Text="Content is required" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Image Url" Component="ImageUrl" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@_section.ImageUrl" Name="ImageUrl" />
                </RadzenColumn>
            </RadzenRow>


            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Background Url" Component="BackgroundUrl" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@_section.BackgroundUrl" Name="BackgroundUrl" />
                </RadzenColumn>
            </RadzenRow>




            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Button Url" Component="ButtonUrl" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@_section.ButtonUrl" Name="ButtonUrl" />
                </RadzenColumn>
            </RadzenRow>

          <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
          </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>



@code {


    [Parameter]
    public int Id { get; set; }
    protected Page _page = new Page();
    protected string userRole;
    protected override async Task OnInitializedAsync()
    {
        _page = await _pageRepository.GetByUrlAsync("/");
        _section = await _sectionRepository.GetSectionAsync(_page.Id, Id);
        var authState = await EducationGuideAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            // Get the user's role
            userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        }
    }


    protected bool errorVisible;
    protected Section _section;


    protected async Task FormSubmit()
    {
        try
        {
            await _sectionRepository.UpdateAsync(_section,Id, _page.Id,userRole);
            DialogService.Close(_section);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }
}
