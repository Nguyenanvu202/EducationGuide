@page "/edit-homepage"
@using AutoMapper;
@using Core.Models.Domain;
@using Core.Models.Repository;
@using Microsoft.EntityFrameworkCore
@inject ISectionRepository _sectionRepository
@inject IPageRepository _pageRepository
@inject IMapper _mapper
@foreach (var _section in _sectionList)
{
    <PageTitle>@_section.ClassName</PageTitle>

    <RadzenColumn SizeMD=12>

        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Section</RadzenAlert>
        <RadzenTemplateForm TItem="Section" Data="@_section" Visible="@(_section != null)" Submit="@FormSubmit">
            <RadzenRow style="margin-bottom: 1rem">

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                        <RadzenLabel Text="Class Name" Component="ClassName" style="width: 100%" />
                    </RadzenColumn>
                    <RadzenColumn SizeMD="9">
                        <RadzenTextBox style="display: block; width: 100%" @bind-Value="@_section.ClassName" Name="ClassName" />
                    </RadzenColumn>
                </RadzenRow>

                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Title" Component="Title" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@_section.Title" Name="Title" />
                    <RadzenRequiredValidator Component="Title" Text="Title is required" />
                </RadzenColumn>

            </RadzenRow>

          <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
          </RadzenStack>

        </RadzenTemplateForm>

    </RadzenColumn>
}

@code {
    private Page _page = new Page();
    protected bool errorVisible;
    private List<Section> _sectionList = new List<Section>();
    private Section _section = new Section();
    private UserAuth users = new UserAuth();
    private Users user;
    protected override async Task OnInitializedAsync()
    {
        _page = await _pageRepository.GetByUrlAsync("/");
        _sectionList = await _sectionRepository.GetSectionsByPageId(_page.Id);
        user = _mapper.Map<UserAuth, Users>(users);
    }



    protected async Task FormSubmit()
    {

        try
        {
            await _sectionRepository.UpdateAsync(_section,_section.Id,_page.Id, user.Roles);
 
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

}
