@page "/course"
@using Core.Models.Domain;
@using Core.Models.Repository;
@inject ITutorRepository _tutorRepository
@inject ICourseRepository _courseRepository
@inject IConfiguration config

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
<AuthorizeView>
<Authorized>

<PageTitle>Course</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Course" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
      <RadzenColumn SizeMD=12>
        <RadzenDataGrid @ref="grid0" ColumnWidth="800px"  AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
            Data="@_course" TItem="Core.Models.Domain.Course" RowSelect="@EditRow">

            <Columns>

                <RadzenDataGridColumn TItem="Core.Models.Domain.Course" Property="Subject" Title="Name" Frozen="true" Width="80px" />
                  
                <RadzenDataGridColumn TItem="Core.Models.Domain.Course" Filterable="false" Sortable="false" Width="20px" TextAlign="TextAlign.Center">
                    <Template Context="course">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, course)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>

    </RadzenColumn>
  </RadzenRow>
</RadzenStack>
</Authorized>
<NotAuthorized>You are not authorized</NotAuthorized>

</AuthorizeView>
@code {
    protected List<Core.Models.Domain.Course> _course;
    protected RadzenDataGrid<Core.Models.Domain.Course> grid0;
    protected override async Task OnInitializedAsync()
    {
        _course = await _courseRepository.GetAllCourseAsync();
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddCourse>("Add Course", null);
        await grid0.Reload();
    }

    protected async Task EditRow(Core.Models.Domain.Course args)
    {
        await DialogService.OpenAsync<EditCourse>("Edit Course", new Dictionary<string, object> { { "Id", args.Id } });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, Core.Models.Domain.Course course)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await _courseRepository.DeleteAsync(course.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete Tutor"
                });
        }
    }
}
