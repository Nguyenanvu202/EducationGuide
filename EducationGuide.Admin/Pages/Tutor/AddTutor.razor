@page "/add-tutor"
@using Core.Models.Domain;
@using Core.Models.Repository;
@using EducationGuide.Admin.Authentication;
@using System.Security.Claims;
@using EducationGuide.Admin.Data;
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject EducationGuideAuthenticationStateProvider EducationGuideAuthenticationStateProvider

@inject ImageUploadTutorService _imageUploadService
@inject ICourseRepository _courseRepository
<PageTitle>Add Tutor</PageTitle>
    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Tutor</RadzenAlert>
        <RadzenTemplateForm TItem="Tutors" Data="@tutor" Visible="@(tutor != null)" Submit="@FormSubmit">
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.Name" Name="Name" />
                    <RadzenRequiredValidator Component="Name" Text="Name is required" />
                </RadzenColumn>
            </RadzenRow>

                <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Image" Component="ImageUrl" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">

               <InputFile OnChange = "@LoadFile" inputfile accept = ".png,.jpg,.jpeg"></InputFile>

            </RadzenColumn>
            </RadzenRow>


            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Phone" Component="Phone" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.Phone" Name="Phone" />
                    <RadzenRequiredValidator Component="Phone" Text="Phone is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Facebook(link Url)" Component="FacebookUrl" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.FacebookUrl" Name="FacebookUrl" />
                    <RadzenRequiredValidator Component="FacebookUrl" Text="FacebookUrl is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Email" Component="Email" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.Email" Name="Email" />
                    <RadzenRequiredValidator Component="Email" Text="Email is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Description" Component="Description" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.Description" Name="Description" />
                    <RadzenRequiredValidator Component="Description" Text="Description is required" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Gender" Component="Gender" style="width: 100%" />
                </RadzenColumn>
                <RadzenRow style="margin-bottom: 1rem">
                <RadzenDropDown TValue="string" Value=@gender Data=@genderOptions Change=" OnGenderChange" Style="width: 100%; max-width: 400px;" />
                </RadzenRow>
            </RadzenRow>


            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Subject" Component="Subject" style="width: 100%" />
                </RadzenColumn>
                    <RadzenDropDown TValue="string" Value=@value Data=@_courseDropDown Change="@(args => value = $"{args}")" Style="width: 100%; max-width: 400px;" >
                    </RadzenDropDown>
               </RadzenRow>
          <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
          </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>
@code{

    private IBrowserFile? file;
    private string userRole;
    private string value;
    private string gender;
    private Tutors tutor = new Tutors();
    private List<string> _courseDropDown = new List<string>();
    Tutors selectedTutors;

    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    [Inject]
    public ITutorRepository _tutorRepository { get; set; }

    protected bool errorVisible;

    private List<string> courseName = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        tutor.Course = new Course();
        _courseDropDown = await _courseRepository.GetAllCourseNameAsync();
        selectedTutors = new Tutors();
        selectedTutors.Course = new Course();

        var authState = await EducationGuideAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Get the user's role
            userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        }
    }
    List<string> genderOptions = new List<string>
    {
    "Male",
    "Female"
    };
    void OnGenderChange(object gender)
    {
        if (gender == "Female")
        {
            tutor.Gender = 1;
        }
        if(gender == "Male")
        {
            tutor.Gender = 0;
        }
    }
    public class GenderOption
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
    protected async Task FormSubmit()
    {
        try
        {
            if (!string.IsNullOrEmpty(value))
            {
                
                tutor = new Tutors
                    {
                        ImgUrl = await _imageUploadService.CaptureFileCreateImg(file, "Tutor"),
                        CreatedBy = userRole,
                        UpdatedBy = userRole,
                        Description = tutor.Description, // Assign the Description value from the form input
                        Email = tutor.Email,
                        FacebookUrl = tutor.FacebookUrl,
                        Gender = tutor.Gender,
                        Name = tutor.Name,
                        Phone = tutor.Phone,
                    };

                // Retrieve the course ID based on the provided value
                int courseId = await _courseRepository.GetIdByNameAsync(value);

                // Assign the course ID to the tutor's CourseId property
                tutor.CourseId = courseId;

                // Save the tutor object to the database
                await _tutorRepository.CreateTutorsAsync(tutor);

                DialogService.Close(tutor);
            }
            else
            {
                // Handle the case when 'value' is null or empty
            }
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }
  }