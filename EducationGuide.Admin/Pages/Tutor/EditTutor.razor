@page "/edit-tutor"
@using Core.Models.Domain;
@using Core.Models.Repository;
@using EducationGuide.Admin.Authentication;
@using System.Security.Claims;
@using EducationGuide.Admin.Data;
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject EducationGuideAuthenticationStateProvider EducationGuideAuthenticationStateProvider
@inject ImageUploadTutorService imageUploadService
<PageTitle>Edit Tutor</PageTitle>

    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Tutor</RadzenAlert>
        <RadzenTemplateForm TItem="Tutors" Data="@tutor" Visible="@(tutor != null)" Submit="@FormSubmit">

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.Name" Name="Name" />
                    <RadzenRequiredValidator Component="Name" Text="Name is required" />
                </RadzenColumn>
            </RadzenRow>

                <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Image" Component="ImageUrl" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">

               <InputFile OnChange = "@LoadFile" inputfile accept = ".png,.jpg,.jpeg"></InputFile>

            </RadzenColumn>
            </RadzenRow>

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Phone" Component="Phone" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.Phone" Name="Phone" />
                    <RadzenRequiredValidator Component="Phone" Text="Phone is required" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Facebook Url" Component="FacebookUrl" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.FacebookUrl" Name="FacebookUrl" />
                    <RadzenRequiredValidator Component="FacebookUrl" Text="FacebookUrl is required" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Email" Component="Email" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.Email" Name="Email" />
                    <RadzenRequiredValidator Component="Email" Text="Email is required" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Description" Component="Description" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@tutor.Description" Name="Description" />
                    <RadzenRequiredValidator Component="Description" Text="Description is required" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenDropDown TValue="string" Value=@tutor.Gender Data=@genderOptions Change="OnGenderChange" Style="width: 100%; max-width: 400px;" />
            </RadzenRow>

            <RadzenRow style="margin-bottom: 1rem">
                <RadzenDropDown TValue="string" Value=@value Data=@_courseDropDown Change="@(args => value = $"{args}")" Style="width: 100%; max-width: 400px;" />
            </RadzenRow>

          <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
          </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>

@code{


    [Inject]
    public ITutorRepository _tutorRepository { get; set; }    

    [Inject]
    public ICourseRepository _courseRepository { get; set; }

    private IBrowserFile? file;
    private string value = "Choose Subject";

    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }




    [Parameter]
    public int Id { get; set; }
    protected string userRole;

    List<string> genderOptions = new List<string>
    {
        "Male",
        "Female"
    };

    public class GenderOption
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
    void OnGenderChange(object value)
    {
        if (value == "Female")
        {
            tutor.Gender = 1;
        }
        if(value == "Male")
        {
            tutor.Gender = 0;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        tutor = await _tutorRepository.GetTutorsAsync(Id);
        _courseDropDown = await _courseRepository.GetAllCourseNameAsync();
        var authState = await EducationGuideAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        }
    }
    protected bool errorVisible;
    protected Tutors tutor;
    protected List<string> _courseDropDown = new List<string>();
    protected async Task FormSubmit()
    {
        try
        {
            tutor.CourseId =await _courseRepository.GetIdByNameAsync(value);
            tutor.ImgUrl = await imageUploadService.CaptureFileImg(file, tutor,"Tutor");
            await _tutorRepository.UpdateAsync(Id, tutor, userRole);
            DialogService.Close(tutor);
        } 
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }



}

