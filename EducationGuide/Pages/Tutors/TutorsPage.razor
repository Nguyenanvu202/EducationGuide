@page "/tutors"
@using Core.Models.Repository;
@using Core.Models.Domain;
@using Infrastructure
@using Infrastructure.Data;
@inject ITutorRepository _tutorRepository;
@inject ISectionRepository _sectionRepository;
@inject IPageRepository _pageRepository;
@inject IConfiguration config
<div class = "Tutor" style = "margin-top: 120px">

<div class = "tutors-container" >
	
		@foreach(var tutor in _tutors)
		{
			<div class="tutor" @onclick="() => ShowTutorInfo(tutor)">
					<img src="@CreateWebPath(tutor.ImgUrl)" alt="@tutor.Name" />
				<h5 class="name">@tutor.Name</h5>
			</div>
		}
  </div>

@if (_selectedTutor != null)
	{

<div class="tutor-preview">

	<div class="preview">
		<Icon Name="IconName.X" Size = "IconSize.x5" style = "position: absolute; cursor: pointer; padding: 10px 15px; right: 0" 
		@onclick = "() => CloseTutorPreview()"></Icon>
			<img src="@CreateWebPath(_selectedTutor.ImgUrl)" alt="@_selectedTutor.Name" class="tutor-image">

				<div class="tutor-info">
				<h5 class="Name">Name: @_selectedTutor.Name</h5>
				<p></p>
				<h5 class="Gender">Sex: @(_selectedTutor.Gender == 1 ? "Female" : "Male")</h5>
				<p></p>
				<h5 class = "Subject">Subject: @_selectedTutor.Course.Subject</h5>
				<p></p>
				<h5 class="Phone">Phone: @_selectedTutor.Phone</h5>
				<p></p>
				<h5 class="Facebook">Facebook: @_selectedTutor.FacebookUrl</h5>
				<p></p>
				<h5 class="Email">Email: @_selectedTutor.Email</h5>
				<p></p>
				<h5 class="Description"> @_selectedTutor.Description</h5>
		</div>

	</div>
</div>
}

	@foreach(var _section in _sections)
	{
		
		<h1 class = "Title">@_section.Title</h1>
		<p class = "page">
			@_section.Content
		</p>
	}

</div>

@code {
	private List<Section> _sections = new List<Section>();
	private List<Tutors> _tutors = new List<Tutors>();
	private Tutors _tutorCourse = new Tutors();
	private Page _page = new Page();
	protected override async Task OnInitializedAsync()
	{
		_page = await _pageRepository.GetByUrlAsync("/tutor");
		_sections = await _sectionRepository.GetSectionsByPageId(_page.Id);
		_tutors = await _tutorRepository.GetAllTutorsAsync();
		await base.OnInitializedAsync();
	}

	Tutors _selectedTutor;
	async Task ShowTutorInfo(Tutors tutor)
	{
		_tutorCourse = await _tutorRepository.GetTutorsAsync(tutor.Id);
		_selectedTutor = _tutorCourse;

	}

	void CloseTutorPreview()
	{
		_selectedTutor = null;
	}

	private string CreateWebPath(string relativePath)
	{
		return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
	}

}
