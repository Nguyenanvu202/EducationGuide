@page "/"
@inject IPageRepository _pageRepository
@inject ISectionRepository _sectionRepository
@inject IContactRepository _contactRepository
@inject ICompanyInfoRepository _companyInfoRepository
@using Core.Models.Domain;
@using Core.Models.Repository;
@using System.Text.Json;
@using Core.Models.Domain;
@inject IConfiguration config
<div class = "Section">

	@foreach (var section_1 in _sections)
	{

			<div class = "@section_1.ClassName">
			@if (!string.IsNullOrEmpty(section_1.BackgroundUrl))
			{
						<img class = "Image" src="@CreateWebPath(section_1.BackgroundUrl)" alt="ClassName" />
			}
			<div class = "Text">

				<h1 class = "Title">@section_1.Title</h1>
				<p class = "Content">@section_1.Content </p>
				@if(section_1.ClassName == "Intro")
				{
					<a class = "Button" href = "@section_1.ButtonUrl">Our Vision</a>
				}
				else
				{
					<a class = "Button" href = "@section_1.ButtonUrl">Learn More</a>
				}
			</div>
			@if (!string.IsNullOrEmpty(section_1.ImageUrl))
			{
						<img class = "Image" src="@CreateWebPath(section_1.ImageUrl)" alt="ClassName" />
			}
			</div>
	}
</div>

	

<div class = "Contact" style = "padding-bottom : 75px">
	<div class = "TitleGroup" >
		<h1 class = "Title" style = "font-weight:bold">
			Contact
		</h1>
		<p class = "STitle">
			Feel free to contact us with any questions.
		</p>
	</div>
	<div class = "Content">
		@foreach (var _companyInfo in _companyInfos)
		{
		@*contact-company*@
		<div class = "Contact-col">
			<h5 class = "Adress">

			Adress: @_companyInfo.Adress
			</h5>
			<h5 class = "Phone">
				Phone: @_companyInfo.Phone
			</h5>
			<h5 class = "Email">
				Email: @_companyInfo.Email
			</h5>
		</div>
}

		@*location*@
		<div class= "Location">
		<iframe
			src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3918.292778508442!2d106.6170108759066!3d10.86532175754599!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x31752b124a55b4f3%3A0xe1fa4e4aea38422b!2zMTE0IFTDom4gQ2jDoW5oIEhp4buHcCAxOCwgVMOibiBDaMOhbmggSGnhu4dwLCBRdeG6rW4gMTIsIFRow6BuaCBwaOG7kSBI4buTIENow60gTWluaCwgVmnhu4d0IE5hbQ!5e0!3m2!1svi!2s!4v1698771546092!5m2!1svi!2s"
			="600"
			="450"
			style="border: 0"
			allowfullscreen=""
			loading="lazy"
			referrerpolicy="no-referrer-when-downgrade"
			></iframe>
		</div>


		@*Contact form*@
	<div class = "ContactForm">
		<input  @bind-value = "_newContact.Name" class = "Name" type = "Name" placeholder = "Name" style = "border: 1px;
		padding: 11px 10px;
		border-style:groove;"/>

		<input @bind-value = "_newContact.Email" class = "Email" type = "Email" placeholder = "Email" style = "border: 1px; padding: 11px 10px;
		border-style:groove"/>

		<input @bind-value = "_newContact.Message" class = "Message" type = "Message" placeholder = "Message" style = "border: 1px;
		padding: 11px 10px;
		border-style:groove;" />
		<button class = "Button" @onclick="() => Submitform()" type = "Submit" >Submit</button>	
			@if (saved)
			{

			}
	</div>

</div>


</div>

@code {

	private Page _page = new Page();
	private List<Section> _sections = new List<Section>();
	private Contact _newContact = new Contact();
	private List<CompanyInfo> _companyInfos = new List<CompanyInfo>();
	protected override async Task OnParametersSetAsync()
	{
		_page = await _pageRepository.GetByUrlAsync("/");
		_sections = await _sectionRepository.GetSectionsByPageId(_page.Id);
		_companyInfos = await _companyInfoRepository.GetAllAsync();
		await base.OnInitializedAsync();
	}

	public bool saved = false;
	private async Task Submitform()
	{
		saved = false;
		try
		{
			await _contactRepository.CreateContactAsync(_newContact);
			_newContact = new Contact();
			saved = true;
		}
		catch
		{

		}

	}

	private string CreateWebPath(string relativePath)
	{
		return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
	}
}
